AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AWS Video Processing Pipeline with MediaConvert, Step Functions, and AI Analysis'

Parameters:
  DateSuffix:
    Type: String
    Default: '20250724'
    Description: Date suffix for resource names
  
  TwelvlabsApiKey:
    Type: String
    NoEcho: true
    Description: Twelvlabs API Key for video analysis
    Default: 'your-twelvlabs-api-key'

Globals:
  Function:
    Timeout: 300
    Runtime: python3.9
    Environment:
      Variables:
        DATE_SUFFIX: !Ref DateSuffix

Resources:
  # S3 Buckets
  VideoInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'video-input-pipeline-${DateSuffix}'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VideoOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'video-output-pipeline-${DateSuffix}'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SQS Dead Letter Queue
  StartLambdaSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: start_lambda_sqs
      MessageRetentionPeriod: 1209600  # 14 days

  # IAM Roles
  MediaConvertServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MediaConvertServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: MediaConvertPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${VideoInputBucket}/*'
                  - !Sub '${VideoOutputBucket}/*'

  VideoConversionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VideoConversionLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: VideoConversionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${VideoInputBucket}/*'
                  - !Sub '${VideoOutputBucket}/*'
              - Effect: Allow
                Action:
                  - mediaconvert:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt MediaConvertServiceRole.Arn

  StartStepFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StartStepFunctionLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StartStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref VideoProcessingWorkflow
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub '${VideoOutputBucket}/*'

  AIAnalysisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AIAnalysisLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AIAnalysisPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${VideoOutputBucket}/*'
              - Effect: Allow
                Action:
                  - transcribe:*
                Resource: '*'

  VideoProcessingStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VideoProcessingStepFunctionsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt TranscribeLambda.Arn
                  - !GetAtt TwelvlabsLambda.Arn

  # Lambda Functions
  VideoConversionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: video-conversion-lambda
      CodeUri: lambda/
      Handler: video_conversion.lambda_handler
      Role: !GetAtt VideoConversionLambdaRole.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref VideoOutputBucket
          MEDIACONVERT_ROLE_ARN: !GetAtt MediaConvertServiceRole.Arn
      Events:
        S3VideoUpload:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref VideoInputBucket
                object:
                  key:
                    - suffix: .mp4
                    - suffix: .mov
                    - suffix: .avi
                    - suffix: .mkv
                    - suffix: .wmv
                    - suffix: .flv
                    - suffix: .webm
                    - suffix: .m4v

  StartStepFunctionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StartStepFunctionLambda
      CodeUri: lambda/
      Handler: start_step_function.lambda_handler
      Role: !GetAtt StartStepFunctionLambdaRole.Arn
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref VideoProcessingWorkflow
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt StartLambdaSQS.Arn
      Events:
        S3VideoConverted:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref VideoOutputBucket
                object:
                  key:
                    - prefix: converted/

  TranscribeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TranscribeLambda
      CodeUri: lambda/
      Handler: transcribe.lambda_handler
      Role: !GetAtt AIAnalysisLambdaRole.Arn
      Timeout: 900

  TwelvlabsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TwelvlabsLambda
      CodeUri: lambda/
      Handler: twelvlabs.lambda_handler
      Role: !GetAtt AIAnalysisLambdaRole.Arn
      Environment:
        Variables:
          TWELVLABS_API_KEY: !Ref TwelvlabsApiKey
      Timeout: 900

  # Step Functions
  VideoProcessingWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: VideoProcessingWorkflow
      DefinitionUri: stepfunctions/workflow.json
      Role: !GetAtt VideoProcessingStepFunctionsRole.Arn
      DefinitionSubstitutions:
        TranscribeLambdaArn: !GetAtt TranscribeLambda.Arn
        TwelvlabsLambdaArn: !GetAtt TwelvlabsLambda.Arn

Outputs:
  VideoInputBucket:
    Description: 'S3 Bucket for video input'
    Value: !Ref VideoInputBucket
    Export:
      Name: !Sub '${AWS::StackName}-VideoInputBucket'

  VideoOutputBucket:
    Description: 'S3 Bucket for video output'
    Value: !Ref VideoOutputBucket
    Export:
      Name: !Sub '${AWS::StackName}-VideoOutputBucket'

  VideoProcessingWorkflowArn:
    Description: 'Step Functions State Machine ARN'
    Value: !Ref VideoProcessingWorkflow
    Export:
      Name: !Sub '${AWS::StackName}-VideoProcessingWorkflow'

  VideoConversionLambdaArn:
    Description: 'Video Conversion Lambda Function ARN'
    Value: !GetAtt VideoConversionLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VideoConversionLambda'
